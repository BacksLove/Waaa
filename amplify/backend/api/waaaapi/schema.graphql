# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!


type User @model {
  id: ID!
  cognitoUserPoolId: String @index(name: "UsersByCognitoID", queryField: "UsersByCognitoID")
  username: String! @index(name: "UsersByUsername", queryField: "UsersByUsername")
  role: String
  gender: Gender
  lookingFor: Gender
  birthday: AWSDate
  country: String
  city: String
  bio: String
  nativeLanguage: String
  languagesSpeak: [String]
  hobbies: [Hobby] @manyToMany(relationName: "HobbyOfUser")
  suspended: Boolean
  suspendedUntil: AWSTimestamp
  reporting: Int
  openDiscussion: Boolean
  privacy: Boolean
  photo: String
  isConnected: Boolean
  createdAt: AWSDateTime
  friendsSender: [Friendship] @hasMany(indexName: "byFriendSender", fields: ["id"])
  friendsReceiver: [Friendship] @hasMany(indexName: "byFriendReceiver", fields: ["id"])
  trips: [Trip] @hasMany
  events: [Event] @hasMany
  eventCoowner: [Event] @manyToMany(relationName: "EventCoowner")
  tripParticipation: [TripParticipant] @hasMany
  eventParticipation: [EventParticipant] @hasMany
  offerParticipation: [OfferParticipants] @hasMany
}

type Trip @model {
  id: ID!
  category: TripCategory @hasOne
  visibility: Boolean
  type: String
  title: String!
  about: String
  state: TripState
  status: Status
  begin: AWSDate
  end: AWSDate
  reason: String
  duration: Int
  openToJoin: Boolean
  isOfferTrip: Boolean
  steps: [Step] @hasMany
  owner: User! @belongsTo(fields: ["ownerId"])
  ownerId: ID!
  participants: [TripParticipant] @hasMany
  createdAt: AWSDateTime
}

type TripParticipant @model {
  id: ID!
  trip: Trip! @belongsTo
  user: User! @belongsTo
  status: DemandStatus!
  isOwner: Boolean
}

type Step @model {
  id: ID!
  transport: Transport @hasOne
  begin: AWSDate
  end: AWSDate
  nbDays: Int
  accommodation: Accommodation @hasOne
  description: String
  country: String!
  city: String!
  address: String
  photos: [String]
  activities: [Activity] @manyToMany(relationName: "StepActivities")
  stepPosition: Int
  trip: Trip @belongsTo
  createdAt: AWSDateTime
  status: Status!
}

type Activity @model {
  id: ID!
  activity: String!
  steps: [Step] @manyToMany(relationName: "StepActivities")
}


type Transport @model{
  id: ID!
  label: String
}

type Event @model {
  id: ID!
  name: String!
  topic: EventTopic! @hasOne
  description: String!
  country: String
  city: String
  address: String
  begin: AWSDate
  end: AWSDate
  mainPhoto: String
  photos: [String]
  hourBegin: Int
  hourEnd: Int
  owner: User @belongsTo
  coowner: [User] @manyToMany(relationName: "EventCoowner")
  maxParticipants: Int
  minAgeRestriction: Int
  isPublic: Boolean
  nbShare: Int
  audience: Audience
  participants: [EventParticipant] @hasMany
  createdAt: AWSDateTime
}


type EventParticipant @model {
  id: ID!
  event: Event! @belongsTo
  user: User! @belongsTo
  status: DemandStatus!
  notified: Boolean
}

type Friendship @model {
  senderID: ID!  @index(name: "byFriendSender")
  receiverID: ID!  @index(name: "byFriendReceiver")
  status: DemandStatus!
  sender: User! @belongsTo(fields: ["senderID"])
  receiver: User! @belongsTo(fields: ["receiverID"])
}

type Offer @model {
id: ID!
title: String!
description: String
price: Float!
resultDate: AWSDateTime
publicationDate: AWSDateTime!
image: String
country: String!
city: String!
hashtag: String
nbWinners: Int!
participants: [OfferParticipants] @hasMany
}
 
type TripCategory @model {
id: ID!
name: String!
trips: [Trip] @hasMany
}

type EventTopic @model {
id: ID!
name: String!
events: [Event] @hasMany
}

type OfferParticipants @model {
 id: ID!
 offer: Offer! @belongsTo
 user: User! @belongsTo
 isWinner: Boolean
 havePaid: Boolean
}

type Accommodation @model {
id: ID!
name: String!
steps: [Step] @hasMany
}

type Hobby @model {
id: ID!
name: String!
users: [User] @manyToMany(relationName: "HobbyOfUser")
}

enum TripState {
PLANNED
ONGOING
FINISHED
WISHED
}

enum Status {
DRAFTED
PUBLISHED
}

enum DemandStatus {
REQUESTED
PENDED
ACCEPTED
REJECTED
BLOCKED
}

enum Gender {
  MALE
  FEMALE
  NONBINARY
  OTHER
}

enum Audience {
ME
FRIENDS
ALL
}

type Mutation {
  selectWinners(offerId: ID!): [User] @function(name: "selectWinnersLambda-${env}")
}
