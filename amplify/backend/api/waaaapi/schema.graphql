# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

 


type User @model {
  id: ID!
  cognitoUserPoolId: String @index(name: "UsersByCognitoID", queryField: "UsersByCognitoID")
  username: String! @index(name: "UsersByUsername", queryField: "UsersByUsername")
  role: String
  gender: Gender
  lookingFor: Gender
  birthday: AWSDate
  country: String
  city: String
  bio: String
  nativeLanguage: String
  languagesSpeak: [String]
  hobbies: [Hobby] @manyToMany(relationName: "HobbyOfUser")
  suspended: Boolean @default(value: "false")
  suspendedUntil: AWSTimestamp
  reporting: Int
  openDiscussion: Boolean
  privacy: Boolean
  photo: String
  isConnected: Boolean @default(value: "false")
  isAdminWaaa: Boolean @default(value: "false")
  createdAt: AWSDateTime
  friendsSender: [Friendship] @hasMany(indexName: "byFriendSender", fields: ["id"])
  friendsReceiver: [Friendship] @hasMany(indexName: "byFriendReceiver", fields: ["id"])
  trips: [Trip] @hasMany
  events: [Event] @hasMany
  eventCoowner: [Event] @manyToMany(relationName: "EventCoowner")
  tripParticipation: [TripParticipant] @hasMany
  eventParticipation: [EventParticipant] @hasMany
  offerParticipation: [OfferParticipants] @hasMany
  #  Get a users messages by querying a GSI on the Messages table.
  messages(after: String, first: Int): [Message] @hasMany
  conversations(after: String, first: Int): [Conversation] @manyToMany(relationName: "UserConversations")
}

type Trip @model {
  id: ID!
  visibility: Boolean
  audience: AudienceTrip
  title: String!
  about: String
  photo: String
  state: TripState
  status: Status
  begin: AWSDate
  end: AWSDate
  reason: String
  duration: Int
  openToJoin: Boolean
  isOfferTrip: Boolean
  steps: [Step] @hasMany
  owner: User! @belongsTo(fields: ["ownerId"])
  ownerId: ID!
  participants: [TripParticipant] @hasMany
  createdAt: AWSDateTime
}

type TripParticipant @model {
  id: ID!
  trip: Trip! @belongsTo
  user: User! @belongsTo
  status: DemandStatus!
  isOwner: Boolean
}

type Step @model {
  id: ID!
  transport: [Transport] @manyToMany(relationName: "StepTransport") 
  begin: AWSDate
  end: AWSDate
  nbDays: Int
  accommodation: Accommodation @hasOne
  description: String
  country: String!
  city: String!
  address: String
  photos: [String]
  #a deplaer dans step
  category: TripCategory @hasOne
  activities: [Activity] @manyToMany(relationName: "StepActivities")
  stepPosition: Int
  trip: Trip @belongsTo
  createdAt: AWSDateTime
  status: Status!
}

type Activity @model {
  id: ID!
  activity: String!
  steps: [Step] @manyToMany(relationName: "StepActivities")
}

type Transport @model{
  id: ID!
  label: String!
  steps: [Step] @manyToMany(relationName: "StepTransport")
}

type Event @model {
  id: ID!
  name: String!
  topic: EventTopic! @hasOne
  description: String!
  country: String
  city: String
  address: String
  begin: AWSDate
  end: AWSDate
  mainPhoto: String
  photos: [String]
  hourBegin: Int
  hourEnd: Int
  owner: User @belongsTo
  coowner: [User] @manyToMany(relationName: "EventCoowner")
  maxParticipants: Int
  minAgeRestriction: Int
  isPublic: Boolean
  canInviteParticipant: Boolean
  nbShare: Int
  audience: Audience
  participants: [EventParticipant] @hasMany
  createdAt: AWSDateTime
}

type EventParticipant @model {
  id: ID!
  event: Event! @belongsTo
  user: User! @belongsTo
  status: DemandStatus!
  notified: Boolean
}

type Friendship @model {
  senderID: ID!  @index(name: "byFriendSender")
  receiverID: ID!  @index(name: "byFriendReceiver")
  status: DemandStatus!
  sender: User! @belongsTo(fields: ["senderID"])
  receiver: User! @belongsTo(fields: ["receiverID"])
}

type Offer @model {
id: ID!
title: String!
description: String
price: Float!
resultDate: AWSDateTime
publicationDate: AWSDateTime!
image: String
country: String!
city: String!
hashtag: String
nbWinners: Int!
participants: [OfferParticipants] @hasMany
}

type TripCategory @model {
id: ID!
name: String!
steps: [Step] @hasMany
}

type EventTopic @model {
id: ID!
name: String!
events: [Event] @hasMany
}

type OfferParticipants @model {
id: ID!
offer: Offer! @belongsTo
user: User! @belongsTo
isWinner: Boolean
havePaid: Boolean
}

type Accommodation @model {
id: ID!
name: String!
steps: [Step] @hasMany
}

type Hobby @model {
id: ID!
name: String!
users: [User] @manyToMany(relationName: "HobbyOfUser")
}

type Conversation @model {
  id: ID!
  #  The Conversation's timestamp.
  createdAt: String
  #  The Conversation's messages.
  messages(after: String, first: Int): [Message] @hasMany
  #  The Conversation's name.
  name: String!
  user: [User] @manyToMany(relationName: "UserConversations")
}

type Message @model {
  id: ID!
  #  The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
  author: User @belongsTo(fields: ["authorId"])
  authorId: ID @index(name: "byMessageSend")
  #  The message content.
  content: String
  #  The id of the Conversation this message belongs to. This is the table primary key.
  #conversationId: ID
  conversation: Conversation @belongsTo(fields: ["conversationId"])
  conversationId: ID @index(name: "MessagebyConversation")
  #  The message timestamp. This is also the table sort key.
  createdAt: AWSDateTime 
  #  Flag denoting if this message has been accepted by the server or not.
  isSent: Boolean
  recipient: User! @belongsTo(fields: ["recipientId"])
  recipientId: ID @index(name: "byMassageReceive")
  sender: String
}

enum TripState {
PLANNED
ONGOING
FINISHED
WISHED
}

enum Status {
DRAFTED
PUBLISHED
}

enum DemandStatus {
REQUESTED
PENDED
ACCEPTED
REJECTED
BLOCKED
}

enum Gender {
  MALE
  FEMALE
  NONBINARY
  OTHER
}

enum Audience {
ME
FRIENDS
ALL
}

enum AudienceTrip {
ME
FAMILY
FRIENDS
ALL
}

type Mutation {
  selectWinners(offerId: ID!): [User] @function(name: "selectWinnersLambda-${env}")
   #  Create a Conversation. Use some of the cooked in template functions for UUID and DateTime.
}

type Query {
  #  Scan through all values of type 'Message'. Use the 'after' and 'before' arguments with the 'nextToken' returned by the 'Message' result to fetch pages.
  allMessage(after: String, conversationId: ID!, first: Int): [Message]
  allMessageFrom(after: String, conversationId: ID!, first: Int, sender: String!): [Message]
  #  Scan through all values of type 'User'. Use the 'after' and 'before' arguments with the 'nextToken' returned by the 'User' result to fetch pages.
  allUser(after: String, first: Int): [User]
  #  Get my user.
  me: User
}

type Subscription {
  #  Subscribes to all new messages in a given Conversation.
  subscribeToNewMessage(conversationId: ID!): Message
    @aws_subscribe(mutations:["createMessage"])
  subscribeToNewUsers: User
        @aws_subscribe(mutations: ["createUser"])
}